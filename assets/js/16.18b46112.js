(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{591:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("2020-12-9")]),t._v(" "),s("h4",{attrs:{id:"_1、计算机的核心是cpu-它承担所有的计算任务。就好比一座工厂-时刻在运行。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、计算机的核心是cpu-它承担所有的计算任务。就好比一座工厂-时刻在运行。"}},[t._v("#")]),t._v(" 1、计算机的核心是CPU，它承担所有的计算任务。就好比一座工厂，时刻在运行。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209150200.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_2、假定工厂的电力有限-一次只能供给一个车间使用。也就是说-一个车间开工的时候-其他车间都必须停工。背后的含义就是-单个cpu一次只能运行一个任务。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、假定工厂的电力有限-一次只能供给一个车间使用。也就是说-一个车间开工的时候-其他车间都必须停工。背后的含义就是-单个cpu一次只能运行一个任务。"}},[t._v("#")]),t._v(" 2、假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209151204.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_3、进程就好比工厂的车间-它代表cpu所能处理的单个任务。任一时刻-cpu总是运行一个进程-其他进程处于非运行状态。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、进程就好比工厂的车间-它代表cpu所能处理的单个任务。任一时刻-cpu总是运行一个进程-其他进程处于非运行状态。"}},[t._v("#")]),t._v(" 3、进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209151322.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_4、一个车间里-可以有很多工人。他们协同完成一个任务。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、一个车间里-可以有很多工人。他们协同完成一个任务。"}},[t._v("#")]),t._v(" 4、一个车间里，可以有很多工人。他们协同完成一个任务。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209151455.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_5、线程就好比车间里的工人。一个进程可以包括多个线程。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、线程就好比车间里的工人。一个进程可以包括多个线程。"}},[t._v("#")]),t._v(" 5、线程就好比车间里的工人。一个进程可以包括多个线程。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209151646.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_6、车间的空间是工人们共享的-比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的-每个线程都可以使用这些共享内存。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、车间的空间是工人们共享的-比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的-每个线程都可以使用这些共享内存。"}},[t._v("#")]),t._v(" 6、车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209152838.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_7、可是-每间房间的大小不同-有些房间最多只能容纳一个人-比如厕所。里面有人的时候-其他人就不能进去了。这代表一个线程使用某些共享内存时-其他线程必须等它结束-才能使用这一块内存。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、可是-每间房间的大小不同-有些房间最多只能容纳一个人-比如厕所。里面有人的时候-其他人就不能进去了。这代表一个线程使用某些共享内存时-其他线程必须等它结束-才能使用这一块内存。"}},[t._v("#")]),t._v(" 7、可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209153221.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_8、一个防止他人进入的简单方法-就是门口加一把锁。先到的人锁上门-后到的人看到上锁-就在门口排队-等锁打开再进去。这就叫-互斥锁-mutual-exclusion-缩写-mutex-防止多个线程同时读写某一块内存区域。互斥锁是一种用于多线程编程中-防止两条线程同时对同一公共资源-比如全局变量-进行读写的机制。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8、一个防止他人进入的简单方法-就是门口加一把锁。先到的人锁上门-后到的人看到上锁-就在门口排队-等锁打开再进去。这就叫-互斥锁-mutual-exclusion-缩写-mutex-防止多个线程同时读写某一块内存区域。互斥锁是一种用于多线程编程中-防止两条线程同时对同一公共资源-比如全局变量-进行读写的机制。"}},[t._v("#")]),t._v(' 8、一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫"互斥锁"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。互斥锁是一种用于多线程编程中，防止两条线程同时对同一公共资源（比如全局变量）进行读写的机制。')]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209154649.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_9、还有些房间-可以同时容纳n个人-比如厨房。也就是说-如果人数大于n-多出来的人只能在外面等着。这好比某些内存区域-只能供给固定数目的线程使用。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9、还有些房间-可以同时容纳n个人-比如厨房。也就是说-如果人数大于n-多出来的人只能在外面等着。这好比某些内存区域-只能供给固定数目的线程使用。"}},[t._v("#")]),t._v(" 9、还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209154831.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_10、这时的解决方法-就是在门口挂n把钥匙。进去的人就取一把钥匙-出来时再把钥匙挂回原处。后到的人发现钥匙架空了-就知道必须在门口排队等着了。这种做法叫做-信号量-semaphore-用来保证多个线程不会互相冲突。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10、这时的解决方法-就是在门口挂n把钥匙。进去的人就取一把钥匙-出来时再把钥匙挂回原处。后到的人发现钥匙架空了-就知道必须在门口排队等着了。这种做法叫做-信号量-semaphore-用来保证多个线程不会互相冲突。"}},[t._v("#")]),t._v(' 10、这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做"信号量"（Semaphore），用来保证多个线程不会互相冲突。')]),t._v(" "),s("p",[t._v("不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209154951.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_11、操作系统的设计-因此可以归结为三点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11、操作系统的设计-因此可以归结为三点"}},[t._v("#")]),t._v(" 11、操作系统的设计，因此可以归结为三点：")]),t._v(" "),s("p",[t._v("（1）以多进程形式，允许多个任务同时运行；")]),t._v(" "),s("p",[t._v("（2）以多线程形式，允许单个任务分成不同的部分运行；")]),t._v(" "),s("p",[t._v("（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/Sweny/images/raw/master/img/20201209155117.png",alt:""}})])])}),[],!1,null,null,null);a.default=r.exports}}]);